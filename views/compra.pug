html(lang="es")
  head
    meta(charset="UTF-8")
    meta(http-equiv="X-UA-Compatible", content="IE=edge")
    meta(name="viewport", content="width=device-width, initial-scale=1.0")
    link(rel="stylesheet", href="/css/style.css")
    link(rel="stylesheet", href="/css/style2.css")

    title Carrito de Compra
  body
    // LOGO SECTION
    section.forms-section
      a(href="/")
        h1.section-title BOOK
          a(href="/")
            samp byte

    // CONTENT WRAPPER
    .content-wrapper
      .container
        .cart
          .cart-header
            h1 Carrito
          .cart-item
            if carrito.length > 0
              each librocarrito in carrito
                .divcontainercompra
                  .imgcomprafinal
                    img(src="img_book/" + librocarrito.book_genre + "/" + librocarrito.book_isbn, alt="")
                  .infocompra
                    p #{librocarrito.book_name}
                    span(id="nombreLibro")
                  .divcantidad
                    p Cantidad
                    .divcantidadbox
                      form(class="divcantidadcontador", id="cantidadselector", method="post", action="/cantidad/" + librocarrito.book_id)
                        input(type="number", name="cantidad", value=librocarrito.carrito_cantidad, min="1", max=librocarrito.disponibles, oninput="actualizarPrecio(this, #{librocarrito.book_price}, 'precio-#{librocarrito.book_id}', #{librocarrito.book_id})")
                        button.btn-update(type="submit") Actualizar
                    p.disponibles #{librocarrito.disponibles || 0} Disponibles
                  .eliminarproducto
                    a(href="/eliminarcarrito/" + librocarrito.book_id, style="color: white; text-decoration: none; cursor: pointer;")
                      i(class="bx bx-trash bx-tada bx-rotate-90", style="color:#b71021")
                  .precio
                    p #{"$" + (librocarrito.book_price * librocarrito.carrito_cantidad).toFixed(2)}
            else
              p No hay productos en el carrito.
        
        // Resumen de compra
        form(method="post", action="/generarOrden")
          .summary
            h2 Resumen de Compra
            p(id="resumen-producto") Producto: $#{carrito.reduce((acc, libro) => acc + (libro.book_price * libro.carrito_cantidad), 0).toFixed(2)}
            p(id="resumen-envio") EnvÃ­o: $79.00
            p(id="resumen-total") Total: $#{(carrito.reduce((acc, libro) => acc + (libro.book_price * libro.carrito_cantidad), 0) + 79).toFixed(2)}
            button.btn-continue(type="submit") Continuar compra
          
         

    script.
      function actualizarPrecio(input, precioUnitario, idPrecio, idLibro) {
        const cantidad = input.value;
        const precioTotal = (precioUnitario * cantidad).toFixed(2);
        document.getElementById(idPrecio).innerText = `$${precioTotal}`;

        // Actualizar el total en el resumen de compra
        const precioProducto = document.getElementById('resumen-producto');
        const precioTotalElement = document.getElementById('resumen-total');
        let totalProducto = 0;
        
        // Recalcular el total del producto
        document.querySelectorAll('.divcantidadbox input[type="number"]').forEach((input) => {
          const precio = parseFloat(input.getAttribute('data-precio'));
          const cantidad = parseInt(input.value, 10);
          totalProducto += precio * cantidad;
        });

        // Actualizar el precio total en el resumen
        precioProducto.innerText = `Producto: $${totalProducto.toFixed(2)}`;
        precioTotalElement.innerText = `Total: $${(totalProducto + 79).toFixed(2)}`;
      }
